#!/usr/bin/perl
#
# Copyright (c) 2011, Wikidi (Ondrej Prochazka <ondra@wikidi.com>) All rights reserved.
#
# Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:
#
#    * Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.
#    * Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.
#    * Neither the name of the Morphine nor the names of its contributors may be used to endorse or promote products derived from this software without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
#

use strict;
use Sphinx::Search;
use Getopt::Long;
Getopt::Long::Configure("bundling");

use vars qw($opt_w $opt_c $opt_h $opt_q $opt_H $opt_t $opt_p %ERRORS $sph $results);

my %ERRORS = ('UNKNOWN' , '-1',
              'OK' , '0',
              'WARNING', '1',
              'CRITICAL', '2');


my $status = process_arguments();

if ($status) {
 print "Sphinxsearch query CRITICAL: processing arguments\n";
 exit $ERRORS{"UNKNOWN"};
}


$SIG{'ALRM'} = sub {
        print ("Sphinxsearch query WARNING: timed out waiting for sphinx \n");
        exit $ERRORS{"WARNING"};
};
alarm($opt_t);


######################## MAIN ######################

$sph = Sphinx::Search->new();

$sph->SetServer($opt_H, $opt_p);
$sph->SetLimits(0, 0);
$sph->SetMaxQueryTime($opt_t);
$sph->SetRankingMode(SPH_RANK_NONE);

$results = $sph->SetMatchMode(SPH_MATCH_ALL)
  ->SetSortMode(SPH_SORT_RELEVANCE)
  ->Query($opt_q);

if( $sph->IsConnectError ) {
 print "Sphinxsearch query CRITICAL: ", $sph->GetLastError,"\n";
 exit $ERRORS{'CRITICAL'};
}

if ( $results->{error} ) {
 print "Sphinxsearch query CRITICAL: ", $sph->GetLastError, "\n";
 exit $ERRORS{'CRITICAL'};
} elsif ( $results->{total_found} < $opt_c ) {
 print "Sphinxsearch query CRITICAL: $opt_q ", $results->{total_found}, "\n";
 exit $ERRORS{'CRITICAL'};
} elsif ( $results->{total_found} < $opt_w ) {
 print "Sphinxsearch query WARNING: $opt_q ", $results->{total_found}, "\n";
 exit $ERRORS{'WARNING'};
}

print "Sphinxsearch query OK: $opt_q ", $results->{total_found}, "\n";
exit $ERRORS{'OK'};

############### Main END ########################

sub process_arguments(){
        GetOptions
                (
                 "h"   => \$opt_h, "help" => \$opt_h,
                 "w=i" => \$opt_w, "warning=i"  => \$opt_w,   # warning
                 "c=i" => \$opt_c, "critical=i" => \$opt_c,       # critical
                 "q=s" => \$opt_q, "query=s" => \$opt_q,       # Query for searching
                 "t=i" => \$opt_t, "timeout=i" => \$opt_t,       # Global timeout
                 "H=s" => \$opt_H, "host=s" => \$opt_H,       # Hostname
                 "p=s" => \$opt_p, "port=i" => \$opt_p       # Hostname
                 );

        if ($opt_h) {
                print_help();
                exit $ERRORS{'OK'};
        }
        if ( $opt_w <= $opt_c) {
            print "Sphinxsearch query UNKNOWN:  (-w '$opt_w') cannot be smaller than Critical (-c '$opt_c'). \n";
                exit $ERRORS{'UNKNOWN'};
        }

        unless (  defined $opt_w &&  defined $opt_c ) {
                print_usage();
                exit $ERRORS{'UNKNOWN'};
        }

        unless (defined $opt_t) {
                $opt_t = 1000 ;      # default timeout
        }

        unless (defined $opt_q) {
                $opt_q = "Prague" ;      # default query
        }

        unless (defined $opt_H) {
                $opt_H = "127.0.0.1" ;      # default host
        }
        
        unless (defined $opt_p) {
                $opt_p = 9312 ;      # default port
        }


return $ERRORS{'OK'};
}

sub print_usage () {
        print "Usage: check_sphinx_query -w <warn> -c <crit> -H <server IP/Name> -q <query> -t <timeout>\n";
}

sub print_help () {
        print "Copyright (c) 2012 Wikidi, a.s. by Ondrej Prochazka\n";
        print "\n";
        print_usage();
        print "\n";
        print "   Checks the number of founded results for query\n";
        print "   Connect to host server and port.\n";
        print "   Ask for query on all indexes and use total founded.\n";
        print "   If CRITICAL are less then total founded, then CRITICAL.\n";
        print "   If WARNING are less then total founded, then WARNING.\n";
        print "";
        print "-w (--warning)   = Min. number of results in queue to generate warning\n";
        print "-c (--critical)  = Min. number of results in queue to generate critical alert ( w > c )\n";
        print "-q (--query) = 'Prague' by default\n";
        print "-H (--host) = Server name or IP(default 127.0.0.1)\n";
        print "-p (--port) = Server port (default 9312)\n";
        print "-t (--timeout)  = Set server connection timeout(1000 by default).\n";
        print "-h (--help)\n";
        print "\n\n"; 
        print "Note: -w and -c are required arguments.\n";
        print "\n\n";
}

